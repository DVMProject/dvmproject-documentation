{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DVMProject The DVMProject is a collection of repositories that make up a Digital Voice Modem implementation. Originally a fork of the MMDVM project. Primary Repositories dvmhost dvmfirmware dvmfirmware-hs dvmfne-v1 (DEPRECATED) Please feel free to reach out to us for help, comments or otherwise, on our Discord .","title":"Home"},{"location":"#welcome-to-dvmproject","text":"The DVMProject is a collection of repositories that make up a Digital Voice Modem implementation. Originally a fork of the MMDVM project.","title":"Welcome to DVMProject"},{"location":"#primary-repositories","text":"dvmhost dvmfirmware dvmfirmware-hs dvmfne-v1 (DEPRECATED) Please feel free to reach out to us for help, comments or otherwise, on our Discord .","title":"Primary Repositories"},{"location":"LICENSE/","text":"The GNU General Public License, Version 2, June 1991 (GPLv2) Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. Terms And Conditions For Copying, Distribution And Modification 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. No Warranty 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"GPLv2 License"},{"location":"LICENSE/#the-gnu-general-public-license-version-2-june-1991-gplv2","text":"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"The GNU General Public License, Version 2, June 1991 (GPLv2)"},{"location":"LICENSE/#preamble","text":"The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"LICENSE/#terms-and-conditions-for-copying-distribution-and-modification","text":"0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.","title":"Terms And Conditions For Copying, Distribution And Modification"},{"location":"LICENSE/#no-warranty","text":"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"No Warranty"},{"location":"fne/","text":"Digital Voice Modem Fixed Network Equipment DEPRECATED DEPRECATED DEPRECATED The DVM FNE provides server-side linking software to connect multiple DVMs together in an integrated network. This project is a direct fork of the HBlink (https://github.com/HBLink-org/HBLink) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz Quick Setup Instructions Ensure python3.9, python3.9-venv, python3.9-dev are installed via apt/your favorite package maneger. Create the virtualenv and activate it with python3.9 -m venv . && source bin/activate Install requirements: pip install wheel && pip install -r requirements.txt Set up your config file and rules Run python fne_router.py to start up the router. License This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, strictly for amateur and educational use ONLY. Any other use is at the risk of user and all commercial purposes are strictly forbidden.","title":"Getting Started"},{"location":"fne/#digital-voice-modem-fixed-network-equipment","text":"DEPRECATED DEPRECATED DEPRECATED The DVM FNE provides server-side linking software to connect multiple DVMs together in an integrated network. This project is a direct fork of the HBlink (https://github.com/HBLink-org/HBLink) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz","title":"Digital Voice Modem Fixed Network Equipment"},{"location":"fne/#quick-setup-instructions","text":"Ensure python3.9, python3.9-venv, python3.9-dev are installed via apt/your favorite package maneger. Create the virtualenv and activate it with python3.9 -m venv . && source bin/activate Install requirements: pip install wheel && pip install -r requirements.txt Set up your config file and rules Run python fne_router.py to start up the router.","title":"Quick Setup Instructions"},{"location":"fne/#license","text":"This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, strictly for amateur and educational use ONLY. Any other use is at the risk of user and all commercial purposes are strictly forbidden.","title":"License"},{"location":"fw/","text":"Digital Voice Modem Firmware The DVM firmware provides the embedded microcontroller implementation of a mixed-mode DMR, P25 and/or NXDN or dedicated-mode DMR, P25 or NXDN repeater system. The firmware; is the portion of a complete Over-The-Air modem implementation that connects directly to an appropriate air interface (usually a analog radio) and performs the actual reception and creation of the digitial waveforms. This project is a direct fork of the MMDVM (https://github.com/g4klx/MMDVM) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz Building Please see the various Makefile's included in the project for more information. This project includes a few Makefiles to target different hardware. (All following information assumes familiarity with the standard Linux make system.) Makefile.SAM3X8_DUE - This makefile is used for building binaries to flash onto a Arduino Due device. Makefile.STM32F4 - This makefile is used for targeting a generic STM32F4 device. Makefile.STM32F4_POG - This makefile is used for targeting the STM32F4 device built by RepeaterBuilder (http://www.repeater-builder.com/products/stm32-dvm.html). Makefile.STM32F4_EDA - This makefile is used for targeting the \"v3\" STM32F4 405 or 446 device built by WA0EDA for the MTR2000 and MASTR 3. Makefile.STM32F4_DVMV1 - This makefile is used for targeting the official DVMProject V1 boards (https://store.omahacomms.com) All of these firmwares should be compiled on Linux, any other systems YMMV. For the standard Arduino Due device, you should have the Arduino development SDK installed to your home directory under \".arduino15\". There are some minor tweaks that must be performed to compile for this platform: Locate platform.txt. On an Ubuntu OS it should be in: /home/$user/.arduino15/packages/arduino/hardware/sam/1.6.8/ Open the file in a text editor and change the line: # Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} \"-T{build.variant.path}/{build.ldscript}\" \"-Wl,-Map,{build.path}/{build.project_name}.map\" {compiler.c.elf.extra_flags} -o \"{build.path}/{build.project_name}.elf\" \"-L{build.path}\" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} \"{build.variant.path}/{build.variant_system_lib}\" \"{build.path}/{archive_file}\" -Wl,--end-group -lm -gcc To: recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} \"-T{build.variant.path}/{build.ldscript}\" \"-Wl,-Map,{build.path}/{build.project_name}.map\" {compiler.c.elf.extra_flags} -o \"{build.path}/{build.project_name}.elf\" \"-L{build.path}\" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} \"{build.variant.path}/{build.variant_system_lib}\" \"{build.system.path}/CMSIS/CMSIS/Lib/GCC/libarm_cortexM3l_math.a\" \"{build.path}/{archive_file}\" -Wl,--end-group -lm -gcc For STM32F4 using Ubuntu OS install the standard ARM embedded toolchain (typically arm-gcc-none-eabi). Make sure to clone this repository with the --recurse-submodules option, otherwise the STM32 platform files will be missing! git clone --recurse-submodules https://github.com/DVMProject/dvmfirmware.git Use the make command to build the firmware, choosing the appropriate makefile with the -f switch. Firmware installation Some devices can be used on top on a RPi attached via the GPIO port or standalone and others are connected via USB. Both variants require different handling of compiling and uploading the firmware, examples on flashing devices are mostly not included here because the methods to flash vary from device to device. Notes NXDN Support Note : NXDN support is currently experimental. License This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"Getting Started"},{"location":"fw/#digital-voice-modem-firmware","text":"The DVM firmware provides the embedded microcontroller implementation of a mixed-mode DMR, P25 and/or NXDN or dedicated-mode DMR, P25 or NXDN repeater system. The firmware; is the portion of a complete Over-The-Air modem implementation that connects directly to an appropriate air interface (usually a analog radio) and performs the actual reception and creation of the digitial waveforms. This project is a direct fork of the MMDVM (https://github.com/g4klx/MMDVM) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz","title":"Digital Voice Modem Firmware"},{"location":"fw/#building","text":"Please see the various Makefile's included in the project for more information. This project includes a few Makefiles to target different hardware. (All following information assumes familiarity with the standard Linux make system.) Makefile.SAM3X8_DUE - This makefile is used for building binaries to flash onto a Arduino Due device. Makefile.STM32F4 - This makefile is used for targeting a generic STM32F4 device. Makefile.STM32F4_POG - This makefile is used for targeting the STM32F4 device built by RepeaterBuilder (http://www.repeater-builder.com/products/stm32-dvm.html). Makefile.STM32F4_EDA - This makefile is used for targeting the \"v3\" STM32F4 405 or 446 device built by WA0EDA for the MTR2000 and MASTR 3. Makefile.STM32F4_DVMV1 - This makefile is used for targeting the official DVMProject V1 boards (https://store.omahacomms.com) All of these firmwares should be compiled on Linux, any other systems YMMV. For the standard Arduino Due device, you should have the Arduino development SDK installed to your home directory under \".arduino15\". There are some minor tweaks that must be performed to compile for this platform: Locate platform.txt. On an Ubuntu OS it should be in: /home/$user/.arduino15/packages/arduino/hardware/sam/1.6.8/ Open the file in a text editor and change the line: # Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} \"-T{build.variant.path}/{build.ldscript}\" \"-Wl,-Map,{build.path}/{build.project_name}.map\" {compiler.c.elf.extra_flags} -o \"{build.path}/{build.project_name}.elf\" \"-L{build.path}\" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} \"{build.variant.path}/{build.variant_system_lib}\" \"{build.path}/{archive_file}\" -Wl,--end-group -lm -gcc To: recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} \"-T{build.variant.path}/{build.ldscript}\" \"-Wl,-Map,{build.path}/{build.project_name}.map\" {compiler.c.elf.extra_flags} -o \"{build.path}/{build.project_name}.elf\" \"-L{build.path}\" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} \"{build.variant.path}/{build.variant_system_lib}\" \"{build.system.path}/CMSIS/CMSIS/Lib/GCC/libarm_cortexM3l_math.a\" \"{build.path}/{archive_file}\" -Wl,--end-group -lm -gcc For STM32F4 using Ubuntu OS install the standard ARM embedded toolchain (typically arm-gcc-none-eabi). Make sure to clone this repository with the --recurse-submodules option, otherwise the STM32 platform files will be missing! git clone --recurse-submodules https://github.com/DVMProject/dvmfirmware.git Use the make command to build the firmware, choosing the appropriate makefile with the -f switch.","title":"Building"},{"location":"fw/#firmware-installation","text":"Some devices can be used on top on a RPi attached via the GPIO port or standalone and others are connected via USB. Both variants require different handling of compiling and uploading the firmware, examples on flashing devices are mostly not included here because the methods to flash vary from device to device.","title":"Firmware installation"},{"location":"fw/#notes","text":"NXDN Support Note : NXDN support is currently experimental.","title":"Notes"},{"location":"fw/#license","text":"This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"License"},{"location":"host/","text":"Digital Voice Modem Host The DVM Host software provides the host computer implementation of a mixed-mode DMR, P25 and/or NXDN or dedicated-mode DMR, P25 or NXDN repeater system that talks to the actual modem hardware. The host software; is the portion of a complete Over-The-Air modem implementation that performs the data processing, decision making and FEC correction for a digital repeater. This project is a direct fork of the MMDVMHost (https://github.com/g4klx/MMDVMHost) project, and combines the MMDVMCal (https://github.com/g4klx/MMDVMCal) project into a single package. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz Building This project utilizes CMake for its build system. (All following information assumes familiarity with the standard Linux make system.) The DVM Host software does not have any specific library dependancies and is written to be as library-free as possible. A basic GCC/G++ install is usually all thats needed to compile. Build Instructions Clone the repository. git clone https://github.com/DVMProject/dvmhost.git Switch into the \"dvmhost\" folder. Create a new folder named \"build\" and switch into it. # cd dvmhost dvmhost # mkdir build dvmhost # cd build Run CMake with any specific options required. (Where [options] is any various compilation options you require.) dvmhost/build # cmake [options] .. ... -- Build files have been written to: dvmhost/build dvmhost/build # make If cross-compiling is required (for either ARM 32bit, 64bit or old Raspberry Pi ARM 32bit), the CMake build system has some options: -DCROSS_COMPILE_ARM=1 - This will cross-compile dvmhost for ARM 32bit. -DCROSS_COMPILE_AARCH64=1 - This will cross-compile dvmhost for ARM 64bit. -DCROSS_COMPILE_RPI_ARM=1 - This will cross-compile for old Raspberry Pi ARM 32 bit. (see below) Please note cross-compliation requires you to have the appropriate development packages installed for your system. For ARM 32-bit, on Debian/Ubuntu OS install the \"arm-linux-gnueabihf-gcc\" and \"arm-linux-gnueabihf-g++\" packages. For ARM 64-bit, on Debian/Ubuntu OS install the \"aarch64-linux-gnu-gcc\" and \"aarch64-linux-gnu-g++\" packages. For old RPi 1 using Debian/Ubuntu OS install the standard ARM embedded toolchain (typically \"arm-none-eabi-gcc\" and \"arm-none-eabi-g++\"). Switch to \"/opt\" and checkout https://github.com/raspberrypi/tools.git . Compiled Protocol Options These are the protocols that are compiled-in to the host for data processing. By default, support for both DMR and P25 protocols are enabled. And, support for the NXDN protocol is disabled. What \"compiled-in\" support means is whether or not the host will perform any processing for the specified protocol (and this is regardless of whether or not the config.yml has a protocol specified for being enabled or not). In order to change what protocol support is compiled into the host, these are the CMake options to supply: * -DENABLE_DMR=1 - This will enable compiled-in DMR protocol support. * -DENABLE_P25=1 - This will enable compiled-in P25 protocol support. * -DENABLE_NXDN=1 - This will enable compiled-in NXDN protocol support. NXDN Support Note : NXDN support is currently experimental. Configuration When first setting up a DVM instance, it is required to properly set the \"Logical Channel ID\" (or LCN ID) data and then calibrate the modem. Initial Setup Edit config.yml and ensure the settings for the modem are correct, find the \"modem\" section in \"system\". Check that the uart protocol has the appropriate UART port and port speed set (the config.yml defaults to /dev/ttyUSB0 and 115200). Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --setup . This will start the dvmhost setup mode. Set the channel ID using the \"i\" command. This will select the identity table bandplan entry to use for frequency selection. The bandplan information is contained within the iden_table.dat file. The identity table information will also appear during dvmhost startup like this: M: ... (HOST) Channel Id 0: BaseFrequency = 851006250Hz, TXOffsetMhz = -45.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 1: BaseFrequency = 762006250Hz, TXOffsetMhz = 30.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 15: BaseFrequency = 935001250Hz, TXOffsetMhz = -39.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 2: BaseFrequency = 450000000Hz, TXOffsetMhz = 5.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz Set the channel number using either the \"c\" or \"f\" command. The \"f\" command is recommended as it will automatically calculate the appropriate channel number from the DVM's transmit frequency. Save the configuration using \"s\" and quit setup mode with \"q\". Transmit Calibration Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --cal . This will start the dvmhost calibration mode. The best way to calibrate the DVM is to use a radio from which you can receive and transmit the appropriate test patterns (for example using ASTRO25 Tuner and an XTS radio to use the \"Bit Error Rate\" functions under Performance Testing). Depending on which protocol you are calibration with, enter DMR BS 1031 Hz Test Pattern (M) or P25 1011 Hz Test Pattern (NAC293 ID1 TG1) (P). Ensure the TXLevel is set to 50 (it should be by default, \"`\" will display current values, use \"T\" [increase] and \"t\" [decrease] if necessary to set it to 50). If the hardware in use has a TX potentiometer, set it to the to minimum level. Start Tx (press spacebar to toggle Tx). While observing the BER via whatever means available, adjust the TX potentiometer for the lowest received BER. If necessary also adjust the software TXLevel for some fine tuning with the \"T\" (increase) and \"t\" (decrease). Stop Tx (press spacebar to toggle Tx). Save the configuration using \"s\" and quit calibration mode with \"q\". Receive Calibration Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --cal . This will start the dvmhost calibration mode. The best way to calibrate the DVM is to use a radio from which you can receive and transmit the appropriate test patterns (for example using ASTRO25 Tuner and an XTS radio to use the \"Transmitter Test Pattern\" functions under Performance Testing). Depending on which protocol you are calibration with, enter DMR BS 1031 Hz Test Pattern (M) or P25 1011 Hz Test Pattern (P). Ensure the RXLevel is set to 50 (it should be by default, \"`\" will display current values, use \"R\" [increase] and \"r\" [decrease] if necessary to set it to 50). If the hardware in use has a RX potentiometer, set it to the to minimum level. (If using something like the RepeaterBuilder STM32 board, decrease both the coarse and fine potentiometers to minimum level.) Depending on which protocol you are calibration with, enter DMR MS 1031 Hz Test Pattern (J) or P25 1011 Hz Test Pattern (j). While observing the BER via the calibration console, adjust the RX potentiometer(s) for the lowest received BER. If necessary also adjust the software RXLevel for some fine tuning with the \"R\" (increase) and \"r\" (decrease). Save the configuration using \"s\" and quit calibration mode with \"q\". Calibration Notes During Transmit Calibration, it may be necessary to adjust the symbol levels directly. Normally this isn't required as the DVM will just work, but some radios require some fine adjustment of the symbol levels, this is exposed in the calibration mode. Unusually high BER >10% and other various receive problems may be due to the radio/hotspot being off frequency and requiring some adjustment. Even a slight frequency drift can be catastrophic for proper digital modulation. The recommendation is to ensure the interfaced radio does not have an overall reference frequency drift > +/- 150hz. An unusually high BER can also be explained by DC level offsets in the signal paths, or issues with the FM deviation levels on the interfaced radio being too high or too low. Command Line Parameters usage: ./dvmhost [-vh] [-f] [--cal] [--setup] [-c <configuration file>] [--remote [-a <address>] [-p <port>]] -f foreground mode --cal calibration mode --setup setup mode -c <file> specifies the configuration file to use --remote remote modem mode -a remote modem command address -p remote modem command port -v show version information -h show this screen -- stop handling options Notes Some extra notes for those who are using the Raspberry Pi, default Raspbian OS or Debian OS installations. You will not be able to flash or access the STM32 modem unless you do some things beforehand. Disable the Bluetooth services. Bluetooth will share the GPIO serial interface on /dev/ttyAMA0 . On Rasbian OS or Debian OS, this is done by: systemctl disable bluetooth The default Rasbian OS and Debian OS will have a getty instance listening on /dev/ttyAMA0 . This can conflict with the STM32, and is best if disabled. On Rasbian OS or Debian OS, this is done by: systemctl disable serial-getty@ttyAMA0.service There's a default boot option which is also listening on the GPIO serial interface. This must be disabled . Open the /boot/config.txt file in your favorite editor (vi or pico) and change it from: console=serial0,115200 console=tty1 root=PARTUUID=[this is dynamic per partition] rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait to console=tty1 root=PARTUUID=[this is dynamic per partition] rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait All thats being done is to remove the console=serial0,115200 part. Do not change anything else. Save the file, then reboot. License This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"Getting Started"},{"location":"host/#digital-voice-modem-host","text":"The DVM Host software provides the host computer implementation of a mixed-mode DMR, P25 and/or NXDN or dedicated-mode DMR, P25 or NXDN repeater system that talks to the actual modem hardware. The host software; is the portion of a complete Over-The-Air modem implementation that performs the data processing, decision making and FEC correction for a digital repeater. This project is a direct fork of the MMDVMHost (https://github.com/g4klx/MMDVMHost) project, and combines the MMDVMCal (https://github.com/g4klx/MMDVMCal) project into a single package. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz","title":"Digital Voice Modem Host"},{"location":"host/#building","text":"This project utilizes CMake for its build system. (All following information assumes familiarity with the standard Linux make system.) The DVM Host software does not have any specific library dependancies and is written to be as library-free as possible. A basic GCC/G++ install is usually all thats needed to compile.","title":"Building"},{"location":"host/#build-instructions","text":"Clone the repository. git clone https://github.com/DVMProject/dvmhost.git Switch into the \"dvmhost\" folder. Create a new folder named \"build\" and switch into it. # cd dvmhost dvmhost # mkdir build dvmhost # cd build Run CMake with any specific options required. (Where [options] is any various compilation options you require.) dvmhost/build # cmake [options] .. ... -- Build files have been written to: dvmhost/build dvmhost/build # make If cross-compiling is required (for either ARM 32bit, 64bit or old Raspberry Pi ARM 32bit), the CMake build system has some options: -DCROSS_COMPILE_ARM=1 - This will cross-compile dvmhost for ARM 32bit. -DCROSS_COMPILE_AARCH64=1 - This will cross-compile dvmhost for ARM 64bit. -DCROSS_COMPILE_RPI_ARM=1 - This will cross-compile for old Raspberry Pi ARM 32 bit. (see below) Please note cross-compliation requires you to have the appropriate development packages installed for your system. For ARM 32-bit, on Debian/Ubuntu OS install the \"arm-linux-gnueabihf-gcc\" and \"arm-linux-gnueabihf-g++\" packages. For ARM 64-bit, on Debian/Ubuntu OS install the \"aarch64-linux-gnu-gcc\" and \"aarch64-linux-gnu-g++\" packages. For old RPi 1 using Debian/Ubuntu OS install the standard ARM embedded toolchain (typically \"arm-none-eabi-gcc\" and \"arm-none-eabi-g++\"). Switch to \"/opt\" and checkout https://github.com/raspberrypi/tools.git .","title":"Build Instructions"},{"location":"host/#compiled-protocol-options","text":"These are the protocols that are compiled-in to the host for data processing. By default, support for both DMR and P25 protocols are enabled. And, support for the NXDN protocol is disabled. What \"compiled-in\" support means is whether or not the host will perform any processing for the specified protocol (and this is regardless of whether or not the config.yml has a protocol specified for being enabled or not). In order to change what protocol support is compiled into the host, these are the CMake options to supply: * -DENABLE_DMR=1 - This will enable compiled-in DMR protocol support. * -DENABLE_P25=1 - This will enable compiled-in P25 protocol support. * -DENABLE_NXDN=1 - This will enable compiled-in NXDN protocol support. NXDN Support Note : NXDN support is currently experimental.","title":"Compiled Protocol Options"},{"location":"host/#configuration","text":"When first setting up a DVM instance, it is required to properly set the \"Logical Channel ID\" (or LCN ID) data and then calibrate the modem.","title":"Configuration"},{"location":"host/#initial-setup","text":"Edit config.yml and ensure the settings for the modem are correct, find the \"modem\" section in \"system\". Check that the uart protocol has the appropriate UART port and port speed set (the config.yml defaults to /dev/ttyUSB0 and 115200). Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --setup . This will start the dvmhost setup mode. Set the channel ID using the \"i\" command. This will select the identity table bandplan entry to use for frequency selection. The bandplan information is contained within the iden_table.dat file. The identity table information will also appear during dvmhost startup like this: M: ... (HOST) Channel Id 0: BaseFrequency = 851006250Hz, TXOffsetMhz = -45.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 1: BaseFrequency = 762006250Hz, TXOffsetMhz = 30.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 15: BaseFrequency = 935001250Hz, TXOffsetMhz = -39.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz M: ... (HOST) Channel Id 2: BaseFrequency = 450000000Hz, TXOffsetMhz = 5.000000MHz, BandwidthKhz = 12.500000KHz, SpaceKhz = 6.250000KHz Set the channel number using either the \"c\" or \"f\" command. The \"f\" command is recommended as it will automatically calculate the appropriate channel number from the DVM's transmit frequency. Save the configuration using \"s\" and quit setup mode with \"q\".","title":"Initial Setup"},{"location":"host/#transmit-calibration","text":"Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --cal . This will start the dvmhost calibration mode. The best way to calibrate the DVM is to use a radio from which you can receive and transmit the appropriate test patterns (for example using ASTRO25 Tuner and an XTS radio to use the \"Bit Error Rate\" functions under Performance Testing). Depending on which protocol you are calibration with, enter DMR BS 1031 Hz Test Pattern (M) or P25 1011 Hz Test Pattern (NAC293 ID1 TG1) (P). Ensure the TXLevel is set to 50 (it should be by default, \"`\" will display current values, use \"T\" [increase] and \"t\" [decrease] if necessary to set it to 50). If the hardware in use has a TX potentiometer, set it to the to minimum level. Start Tx (press spacebar to toggle Tx). While observing the BER via whatever means available, adjust the TX potentiometer for the lowest received BER. If necessary also adjust the software TXLevel for some fine tuning with the \"T\" (increase) and \"t\" (decrease). Stop Tx (press spacebar to toggle Tx). Save the configuration using \"s\" and quit calibration mode with \"q\".","title":"Transmit Calibration"},{"location":"host/#receive-calibration","text":"Start dvmhost as follows: /path/to/dvmhost -c /path/to/config.yml --cal . This will start the dvmhost calibration mode. The best way to calibrate the DVM is to use a radio from which you can receive and transmit the appropriate test patterns (for example using ASTRO25 Tuner and an XTS radio to use the \"Transmitter Test Pattern\" functions under Performance Testing). Depending on which protocol you are calibration with, enter DMR BS 1031 Hz Test Pattern (M) or P25 1011 Hz Test Pattern (P). Ensure the RXLevel is set to 50 (it should be by default, \"`\" will display current values, use \"R\" [increase] and \"r\" [decrease] if necessary to set it to 50). If the hardware in use has a RX potentiometer, set it to the to minimum level. (If using something like the RepeaterBuilder STM32 board, decrease both the coarse and fine potentiometers to minimum level.) Depending on which protocol you are calibration with, enter DMR MS 1031 Hz Test Pattern (J) or P25 1011 Hz Test Pattern (j). While observing the BER via the calibration console, adjust the RX potentiometer(s) for the lowest received BER. If necessary also adjust the software RXLevel for some fine tuning with the \"R\" (increase) and \"r\" (decrease). Save the configuration using \"s\" and quit calibration mode with \"q\".","title":"Receive Calibration"},{"location":"host/#calibration-notes","text":"During Transmit Calibration, it may be necessary to adjust the symbol levels directly. Normally this isn't required as the DVM will just work, but some radios require some fine adjustment of the symbol levels, this is exposed in the calibration mode. Unusually high BER >10% and other various receive problems may be due to the radio/hotspot being off frequency and requiring some adjustment. Even a slight frequency drift can be catastrophic for proper digital modulation. The recommendation is to ensure the interfaced radio does not have an overall reference frequency drift > +/- 150hz. An unusually high BER can also be explained by DC level offsets in the signal paths, or issues with the FM deviation levels on the interfaced radio being too high or too low.","title":"Calibration Notes"},{"location":"host/#command-line-parameters","text":"usage: ./dvmhost [-vh] [-f] [--cal] [--setup] [-c <configuration file>] [--remote [-a <address>] [-p <port>]] -f foreground mode --cal calibration mode --setup setup mode -c <file> specifies the configuration file to use --remote remote modem mode -a remote modem command address -p remote modem command port -v show version information -h show this screen -- stop handling options","title":"Command Line Parameters"},{"location":"host/#notes","text":"Some extra notes for those who are using the Raspberry Pi, default Raspbian OS or Debian OS installations. You will not be able to flash or access the STM32 modem unless you do some things beforehand. Disable the Bluetooth services. Bluetooth will share the GPIO serial interface on /dev/ttyAMA0 . On Rasbian OS or Debian OS, this is done by: systemctl disable bluetooth The default Rasbian OS and Debian OS will have a getty instance listening on /dev/ttyAMA0 . This can conflict with the STM32, and is best if disabled. On Rasbian OS or Debian OS, this is done by: systemctl disable serial-getty@ttyAMA0.service There's a default boot option which is also listening on the GPIO serial interface. This must be disabled . Open the /boot/config.txt file in your favorite editor (vi or pico) and change it from: console=serial0,115200 console=tty1 root=PARTUUID=[this is dynamic per partition] rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait to console=tty1 root=PARTUUID=[this is dynamic per partition] rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait All thats being done is to remove the console=serial0,115200 part. Do not change anything else. Save the file, then reboot.","title":"Notes"},{"location":"host/#license","text":"This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"License"},{"location":"hs-fw/","text":"Digital Voice Modem Firmware (Hotspot) The DVM hotspot firmware provides the embedded microcontroller implementation of a dedicated-mode DMR, P25 or NXDN hotspot system. The firmware; is the portion of a complete Over-The-Air modem implementation that uses an ADF7021 to provide a raw RF interface. This project is a direct fork of the MMDVM_HS (https://github.com/juribeparada/MMDVM_HS) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz Building Please see the various Makefile's included in the project for more information. This project includes a few Makefiles to target different hardware. (All following information assumes familiarity with the standard Linux make system.) Makefile.STM32FX - This makefile is used for targeting a generic STM32F103 with an ADF7021 RF SoC device. For STM32F103 using Ubuntu OS install the standard ARM embedded toolchain (typically arm-gcc-none-eabi). Make sure to clone this repository with the --recurse-submodules option, otherwise the STM32 platform files will be missing! git clone --recurse-submodules https://github.com/DVMProject/dvmfirmware-hs.git To build the firmware, use the make command, followed by -f and the correct makefile, followed by the type of board you are using. NOTE: The only two known tested targets are mmdvm-hs-hat-dual and mmdvm-hs-hat-dual-usb . An example of this would be make -f Makefile.STM32FX mmdvm-hs-hat-dual for a full duplex modem hotspot, attached to GPIO. Firmware installation The device can be used on top on a RPi attached via the GPIO port or standalone and connected via USB. Both variants require different handling of compiling and uploading the firmware, examples on flashing devices are mostly not included here because the methods to flash vary from device to device. The USB connection requires firmware with bootloader support whereas the GPIO version does not. For USB connection a bootloader has to be installed initally. This requires STlink connection. After that is done the firmware upgrade can be done via the USB connection. The STlink connection can be used as fallback if wrongly configured firmware was installed for example. Install the firmware via GPIO on Raspberry Pi NOTE: Your mileage may vary with these instructions, the hotspot boards are loosely designed around a common factor but not all are created equally. First you will need to disable the serial console and disable bluetooth. Edit /boot/cmdline.txt and remove the line console=serial0, 115200 . Next, you will need to disable bluetooth on the board. Edit /boot/config.txt and add a line containing dtoverlay=disable-bt . Reboot. Most sets of instructions reccomend to download stm32flash from online, however we have found the prepackaged version to work fine. Once the hotspot is back on, navigate to the build folder where you compiled the firmware. Put a jumper across the J1 points on the board, and the RED heartbeat LED should stop flashing. Run the below command to flash. stm32flash -v -w dvm-firmware-hs_f1.bin -i 20,-21,21,-20 -R /dev/ttyAMA0 You should see the below output if the board flashed successfully. Wrote and verified address 0x0800be40 (100.00%) Done. Resetting device... Reset done. Install the firmware with bootloader support for USB connection If you want to use the device via USB port you have to install a bootloader and build the firmware with bootloader support. As the raw device cannot be used with USB you have to use a USB-serial adapter or STlink device. The bootloader (https://github.com/DVMProject/STM32F10X_Platform/blob/527fee72ae2291486304380cb812c48f36122c32/utils/bootloader/generic_boot20_pc13.bin) should be installed starting at offset 0x8000000. The firmware should be installed starting at offset 0x8002000. An example Using STlink this can be done as follows: user@host:~/dvmfirmware-hs$ -f Makefile.STM32FX mmdvm-hs-hat-usb-dual ... user@host:~/dvmfirmware-hs$ ./STM32F10X_Platform/utils/linux64/st-flash write ./STM32F10X_Platform/utils/bootloader/generic_boot20_pc13.bin 0x8000000 2018-03-02T10:01:04 INFO src/usb.c: -- exit_dfu_mode 2018-03-02T10:01:04 INFO src/common.c: Loading device parameters.... 2018-03-02T10:01:04 INFO src/common.c: Device connected is: F1 Medium-density device, id 0x20036410 2018-03-02T10:01:04 INFO src/common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x10000 bytes (64 KiB) in pages of 1024 bytes 2018-03-02T10:01:04 INFO src/common.c: Attempting to write 7160 (0x1bf8) bytes to stm32 address: 134217728 (0x8000000) Flash page at addr: 0x08001800 erased 2018-03-02T10:01:04 INFO src/common.c: Finished erasing 7 pages of 1024 (0x400) bytes 2018-03-02T10:01:04 INFO src/common.c: Starting Flash write for VL/F0/F3 core id 2018-03-02T10:01:04 INFO src/common.c: Successfully loaded flash loader in sram 6/6 pages written 2018-03-02T10:01:05 INFO src/common.c: Starting verification of write complete 2018-03-02T10:01:05 INFO src/common.c: Flash written and verified! jolly good! user@host:~/dvmfirmware-hs$ ./STM32F10X_Platform/utils/linux64/st-flash write dvm-firmware-hs_f1bl.bin 0x8002000 2018-03-02T10:01:05 INFO src/common.c: Loading device parameters.... 2018-03-02T10:01:05 INFO src/common.c: Device connected is: F1 Medium-density device, id 0x20036410 2018-03-02T10:01:05 INFO src/common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x10000 bytes (64 KiB) in pages of 1024 bytes 2018-03-02T10:01:05 INFO src/common.c: Attempting to write 55016 (0xd6e8) bytes to stm32 address: 134225920 (0x8002000) Flash page at addr: 0x0800f400 erased 2018-03-02T10:01:07 INFO src/common.c: Finished erasing 54 pages of 1024 (0x400) bytes 2018-03-02T10:01:07 INFO src/common.c: Starting Flash write for VL/F0/F3 core id 2018-03-02T10:01:07 INFO src/common.c: Successfully loaded flash loader in sram 53/53 pages written 2018-03-02T10:01:12 INFO src/common.c: Starting verification of write complete 2018-03-02T10:01:13 INFO src/common.c: Flash written and verified! jolly good! The device should now be usable as /dev/ttyACMx. Notes NXDN Support Note : NXDN support is currently experimental. License This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"Getting Started"},{"location":"hs-fw/#digital-voice-modem-firmware-hotspot","text":"The DVM hotspot firmware provides the embedded microcontroller implementation of a dedicated-mode DMR, P25 or NXDN hotspot system. The firmware; is the portion of a complete Over-The-Air modem implementation that uses an ADF7021 to provide a raw RF interface. This project is a direct fork of the MMDVM_HS (https://github.com/juribeparada/MMDVM_HS) project. Please feel free to reach out to us for help, comments or otherwise, on our Discord: https://discord.gg/3pBe8xgrEz","title":"Digital Voice Modem Firmware (Hotspot)"},{"location":"hs-fw/#building","text":"Please see the various Makefile's included in the project for more information. This project includes a few Makefiles to target different hardware. (All following information assumes familiarity with the standard Linux make system.) Makefile.STM32FX - This makefile is used for targeting a generic STM32F103 with an ADF7021 RF SoC device. For STM32F103 using Ubuntu OS install the standard ARM embedded toolchain (typically arm-gcc-none-eabi). Make sure to clone this repository with the --recurse-submodules option, otherwise the STM32 platform files will be missing! git clone --recurse-submodules https://github.com/DVMProject/dvmfirmware-hs.git To build the firmware, use the make command, followed by -f and the correct makefile, followed by the type of board you are using. NOTE: The only two known tested targets are mmdvm-hs-hat-dual and mmdvm-hs-hat-dual-usb . An example of this would be make -f Makefile.STM32FX mmdvm-hs-hat-dual for a full duplex modem hotspot, attached to GPIO.","title":"Building"},{"location":"hs-fw/#firmware-installation","text":"The device can be used on top on a RPi attached via the GPIO port or standalone and connected via USB. Both variants require different handling of compiling and uploading the firmware, examples on flashing devices are mostly not included here because the methods to flash vary from device to device. The USB connection requires firmware with bootloader support whereas the GPIO version does not. For USB connection a bootloader has to be installed initally. This requires STlink connection. After that is done the firmware upgrade can be done via the USB connection. The STlink connection can be used as fallback if wrongly configured firmware was installed for example.","title":"Firmware installation"},{"location":"hs-fw/#install-the-firmware-via-gpio-on-raspberry-pi","text":"NOTE: Your mileage may vary with these instructions, the hotspot boards are loosely designed around a common factor but not all are created equally. First you will need to disable the serial console and disable bluetooth. Edit /boot/cmdline.txt and remove the line console=serial0, 115200 . Next, you will need to disable bluetooth on the board. Edit /boot/config.txt and add a line containing dtoverlay=disable-bt . Reboot. Most sets of instructions reccomend to download stm32flash from online, however we have found the prepackaged version to work fine. Once the hotspot is back on, navigate to the build folder where you compiled the firmware. Put a jumper across the J1 points on the board, and the RED heartbeat LED should stop flashing. Run the below command to flash. stm32flash -v -w dvm-firmware-hs_f1.bin -i 20,-21,21,-20 -R /dev/ttyAMA0 You should see the below output if the board flashed successfully. Wrote and verified address 0x0800be40 (100.00%) Done. Resetting device... Reset done.","title":"Install the firmware via GPIO on Raspberry Pi"},{"location":"hs-fw/#install-the-firmware-with-bootloader-support-for-usb-connection","text":"If you want to use the device via USB port you have to install a bootloader and build the firmware with bootloader support. As the raw device cannot be used with USB you have to use a USB-serial adapter or STlink device. The bootloader (https://github.com/DVMProject/STM32F10X_Platform/blob/527fee72ae2291486304380cb812c48f36122c32/utils/bootloader/generic_boot20_pc13.bin) should be installed starting at offset 0x8000000. The firmware should be installed starting at offset 0x8002000. An example Using STlink this can be done as follows: user@host:~/dvmfirmware-hs$ -f Makefile.STM32FX mmdvm-hs-hat-usb-dual ... user@host:~/dvmfirmware-hs$ ./STM32F10X_Platform/utils/linux64/st-flash write ./STM32F10X_Platform/utils/bootloader/generic_boot20_pc13.bin 0x8000000 2018-03-02T10:01:04 INFO src/usb.c: -- exit_dfu_mode 2018-03-02T10:01:04 INFO src/common.c: Loading device parameters.... 2018-03-02T10:01:04 INFO src/common.c: Device connected is: F1 Medium-density device, id 0x20036410 2018-03-02T10:01:04 INFO src/common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x10000 bytes (64 KiB) in pages of 1024 bytes 2018-03-02T10:01:04 INFO src/common.c: Attempting to write 7160 (0x1bf8) bytes to stm32 address: 134217728 (0x8000000) Flash page at addr: 0x08001800 erased 2018-03-02T10:01:04 INFO src/common.c: Finished erasing 7 pages of 1024 (0x400) bytes 2018-03-02T10:01:04 INFO src/common.c: Starting Flash write for VL/F0/F3 core id 2018-03-02T10:01:04 INFO src/common.c: Successfully loaded flash loader in sram 6/6 pages written 2018-03-02T10:01:05 INFO src/common.c: Starting verification of write complete 2018-03-02T10:01:05 INFO src/common.c: Flash written and verified! jolly good! user@host:~/dvmfirmware-hs$ ./STM32F10X_Platform/utils/linux64/st-flash write dvm-firmware-hs_f1bl.bin 0x8002000 2018-03-02T10:01:05 INFO src/common.c: Loading device parameters.... 2018-03-02T10:01:05 INFO src/common.c: Device connected is: F1 Medium-density device, id 0x20036410 2018-03-02T10:01:05 INFO src/common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x10000 bytes (64 KiB) in pages of 1024 bytes 2018-03-02T10:01:05 INFO src/common.c: Attempting to write 55016 (0xd6e8) bytes to stm32 address: 134225920 (0x8002000) Flash page at addr: 0x0800f400 erased 2018-03-02T10:01:07 INFO src/common.c: Finished erasing 54 pages of 1024 (0x400) bytes 2018-03-02T10:01:07 INFO src/common.c: Starting Flash write for VL/F0/F3 core id 2018-03-02T10:01:07 INFO src/common.c: Successfully loaded flash loader in sram 53/53 pages written 2018-03-02T10:01:12 INFO src/common.c: Starting verification of write complete 2018-03-02T10:01:13 INFO src/common.c: Flash written and verified! jolly good! The device should now be usable as /dev/ttyACMx.","title":"Install the firmware with bootloader support for USB connection"},{"location":"hs-fw/#notes","text":"NXDN Support Note : NXDN support is currently experimental.","title":"Notes"},{"location":"hs-fw/#license","text":"This project is licensed under the GPLv2 License - see the LICENSE.md file for details. Use of this project is intended, for amateur and/or educational use ONLY. Any other use is at the risk of user and all commercial purposes is strictly discouraged.","title":"License"},{"location":"the-team/","text":"DVMProject Team Members Primary Authors Host and Firmware Bryan Biedenkapp FNE and Network Software Bryan Biedenkapp Steven Jennison Natalie Moore Interface Hardware Design Natalie Moore Documentation Team Charles Bricker Connor Lovell Website & Branding Team Connor Lovell Special thanks to Jonathan Naylor G4KLX and the MMDVM authors. Andy Uribe CA6JAU","title":"The Team"},{"location":"the-team/#dvmproject-team-members","text":"","title":"DVMProject Team Members"},{"location":"the-team/#primary-authors","text":"Host and Firmware Bryan Biedenkapp FNE and Network Software Bryan Biedenkapp Steven Jennison Natalie Moore Interface Hardware Design Natalie Moore Documentation Team Charles Bricker Connor Lovell Website & Branding Team Connor Lovell","title":"Primary Authors"},{"location":"the-team/#special-thanks-to","text":"Jonathan Naylor G4KLX and the MMDVM authors. Andy Uribe CA6JAU","title":"Special thanks to"}]}